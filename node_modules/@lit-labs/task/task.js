import{notEqual as t}from"@lit/reactive-element";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const i={INITIAL:0,PENDING:1,COMPLETE:2,ERROR:3},s=Symbol();class h{constructor(t,i,s){this.i=0,this.status=0,this.autoRun=!0,this.t=t,this.t.addController(this);const h="object"==typeof i?i:{task:i,args:s};this.o=h.task,this.h=h.args,this.l=h.onComplete,this.u=h.onError,void 0!==h.autoRun&&(this.autoRun=h.autoRun)}get taskComplete(){return this.v||(1===this.status?this.v=new Promise(((t,i)=>{this.m=t,this._=i})):3===this.status?this.v=Promise.reject(this.k):this.v=Promise.resolve(this.p)),this.v}hostUpdated(){this.performTask()}async performTask(){var t;const i=null===(t=this.h)||void 0===t?void 0:t.call(this);this.shouldRun(i)&&await this.run(i)}shouldRun(t){return this.autoRun&&this.T(t)}async run(t){var i,h,r,e,o;let l,n;null!=t||(t=null===(i=this.h)||void 0===i?void 0:i.call(this)),1!==this.status&&(this.v=void 0,this.m=void 0,this._=void 0),this.status=1,queueMicrotask((()=>this.t.requestUpdate()));const a=++this.i;try{l=await this.o(t)}catch(t){n=t}if(this.i===a){if(l===s)this.status=0;else{if(void 0===n){try{null===(h=this.l)||void 0===h||h.call(this,l)}catch{}this.status=2,null===(r=this.m)||void 0===r||r.call(this,l)}else{try{null===(e=this.u)||void 0===e||e.call(this,n)}catch{}this.status=3,null===(o=this._)||void 0===o||o.call(this,n)}this.p=l,this.k=n}this.t.requestUpdate()}}get value(){return this.p}get error(){return this.k}render(t){var i,s,h,r;switch(this.status){case 0:return null===(i=t.initial)||void 0===i?void 0:i.call(t);case 1:return null===(s=t.pending)||void 0===s?void 0:s.call(t);case 2:return null===(h=t.complete)||void 0===h?void 0:h.call(t,this.value);case 3:return null===(r=t.error)||void 0===r?void 0:r.call(t,this.error);default:this.status}}T(i){const s=this.g;return this.g=i,Array.isArray(i)&&Array.isArray(s)?i.length===s.length&&i.some(((i,h)=>t(i,s[h]))):i!==s}}export{h as Task,i as TaskStatus,s as initialState};
//# sourceMappingURL=task.js.map
